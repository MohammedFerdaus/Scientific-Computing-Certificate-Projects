def add_time(start, duration, day=None):
    # Parse start time
    start_parts = start.split()
    start_hour, start_minute = map(int, start_parts[0].split(':'))
    meridian = start_parts[1]

    # Convert to 24-hour format
    if meridian == 'PM' and start_hour != 12:
        start_hour += 12
    elif meridian == 'AM' and start_hour == 12:
        start_hour = 0

    # Parse duration
    duration_hours, duration_minutes = map(int, duration.split(':'))

    # Add hours and minutes
    total_minutes = start_minute + duration_minutes
    extra_hours = total_minutes // 60
    total_minutes %= 60

    total_hours = start_hour + duration_hours + extra_hours
    days_later = total_hours // 24
    final_hour = total_hours % 24

    # Convert back to 12-hour format
    if final_hour == 0:
        display_hour = 12
        meridian = 'AM'
    elif final_hour < 12:
        display_hour = final_hour
        meridian = 'AM'
    elif final_hour == 12:
        display_hour = 12
        meridian = 'PM'
    else:
        display_hour = final_hour - 12
        meridian = 'PM'

    # Handle optional day of the week
    end_day = ''
    if day:
        days_of_week = ['Sunday', 'Monday', 'Tuesday', 'Wednesday', 'Thursday', 'Friday', 'Saturday']
        day_index = days_of_week.index(day.strip().capitalize())
        end_day = days_of_week[(day_index + days_later) % 7]
        end_day = f', {end_day}'

    # Format result
    result = f'{display_hour}:{total_minutes:02d} {meridian}{end_day}'

    if days_later == 1:
        result += ' (next day)'
    elif days_later > 1:
        result += f' ({days_later} days later)'

    return result
